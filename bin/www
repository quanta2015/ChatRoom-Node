#!/usr/bin/env node


var app = require('../app');
var debug = require('debug')('Project:server');
var http = require('http');

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

var server = http.createServer(app);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


var roomInfo = {};

var io = require('socket.io').listen(server);

io.on('connection', function(socket) {
  var url = socket.request.headers.referer;
  var items = url.split("/");
  var roomId = items[items.length - 1];
  var usr;

  socket.on('join', function(userName) {
    usr = userName;
    if (!roomInfo[roomId]) {
      roomInfo[roomId] = [];
    }
    roomInfo[roomId].push(usr);
    socket.join(roomId); // 加入房间
    io.to(roomId).emit('sys', usr + '加入了房间', roomInfo[roomId]);
    console.log(usr + '加入了' + roomId);
  });

  socket.on('disconnect', function() {
    // 从房间名单中移除
    var index = roomInfo[roomId].indexOf(usr);
    if (index !== -1) {
      roomInfo[roomId].splice(index, 1);
    }
    socket.leave(roomId); // 退出房间
    io.to(roomId).emit('sys', usr + '退出了房间', roomInfo[roomId]);
    console.log(usr + '退出了' + roomId);
  });

  socket.on('leave', function() {
    socket.emit('disconnect');
  });

});



function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}